{
	"name": "FactSale Migration",
	"properties": {
		"activities": [
			{
				"name": "For Each table",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "LookUpMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('LookUpMetadata').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "Copy from on prem to storage",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [
								{
									"name": "Source",
									"value": "Fact.Sale"
								},
								{
									"name": "Destination",
									"value": "wwi-integration//Fact.Sale.csv"
								}
							],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "@concat('Select * from ', item().SchemaName, '.', item().TableName)",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".csv"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "SQLTableLoader",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "BlobStorageSetter",
									"type": "DatasetReference",
									"parameters": {
										"FolderName": {
											"value": "@item().BlobFolder",
											"type": "Expression"
										},
										"FileName": {
											"value": "@item().BlobName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Copy from Storage to AzureDB",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Truncate staging Table",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [
								{
									"name": "Source",
									"value": "Fact.Sale"
								},
								{
									"name": "Destination",
									"value": "wwi-integration//Fact.Sale.csv"
								}
							],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "BlobStorageSetter",
									"type": "DatasetReference",
									"parameters": {
										"FolderName": {
											"value": "@item().BlobFolder",
											"type": "Expression"
										},
										"FileName": {
											"value": "@item().BlobName",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "AzureSQLInserter",
									"type": "DatasetReference",
									"parameters": {
										"TableSchema": {
											"value": "@item().TableSchema",
											"type": "Expression"
										},
										"TableName": {
											"value": "@item().TableName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Truncate staging Table",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "Copy from on prem to storage",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": {
											"value": "@concat('Truncate Table Integration.', item().TableName)",
											"type": "Expression"
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "LookUpMetadata",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select * from IntegrationMetadata.TablesToMove \nwhere Enabled = 1",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetMetadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			}
		],
		"annotations": []
	}
}